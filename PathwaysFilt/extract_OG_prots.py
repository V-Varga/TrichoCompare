# -*- coding: utf-8 -*-
#!/bin/python
"""

Title: extract_OG_prots.py
Date: 2022.03.30
Author: Vir√°g Varga

Description:
	This program the species database generated by prot_DB_plus_OGs.py (Metamonada_pred_OG_DB.txt)
		- or a filtered version of the same, with the same column structure - in order to
		extract only those rows that contain protein queries predicted to be part of a
		list of OGs that the user specifies via command-line input.

List of functions:
	No functions are defined in this script.

List of standard and non-standard modules used:
	sys
	pandas
	os.path

Procedure:
	1. Loading required modules; defining inputs and outputs as command line
		arguments.
	2. Using Pandas to import the contents of the input database.
	3. Filtering the dataframe based on list of OG IDs & writing out the results to a
		tab-separated text file.

Known bugs and limitations:
	- There is only very limited quality-checking integrated into the code - only the
		identification of the program whose OG IDs are being used as input is checked.
	- This program requires the input of a flat database created by prot_DB_plus_OGs.py
		(named Metamonada_pred_OG_DB.txt in the original workflow), or a filtered verison
		of the same, with the same column structure maintained.
	- Both the input and output files have user-defined sections:
		The input file is entirely user-defined; while the output file has a user-defined
		extension. If no extension is given, the default output file name will be the
		base of the input file name with an extension in the format:
			"'__' + OG_program + 'OG-selection.txt'"

Usage
	./extract_OG_prots.py input_db OG_program input_OGs [output_extension]
	OR
	python extract_OG_prots.py input_db OG_program input_OGs [output_extension]

	Note that this program accepts OG program options of:
		Br_Grouped_OGs OR Br_Single_OGs OR ProteinOrtho_OG OR OrthoFinder_OG OR SonicParanoid_OG
	Note that this program accepts input OG lists in the following formats:
		- Singular OG provided on the command line
		- Comma-separated list of OGs provided on the command line (ex. `OG_1,OG_2,OG_3`)
			IMPORTANT: For the grouped Broccoli OGs, a semi-colon should be used as the separator.
			This allows lists of OGs to be used as input (ex. `OG_1,OG_2;OG_3` for 
			["OG_1,OG_2", "OG_3"]). 
			Please note that this means the file/list structure should be slightly different from 
			the formatting found in the databases, as no space (" ") characters are used in the 
			command-line input. This should not present an issue for text file input. 
			Please also note that if this option is used, quotes must be used on the command line, 
			like so: 
				`python extract_OG_prots.py Metamonada_pred_OG_DB.txt Br_Grouped_OGs "OG_169,OG_1038;OG_1" Br_group_test`
		- File containing list of OGs in format: OG_ID1\nOG_ID2 etc.

This script was written for Python 3.8.12, in Spyder 5.1.5.

"""


#Part 1: Import necessary modules, assign command-line arguments

#import necessary modules
import sys #allows assignment of command line arguments
import pandas as pd #facilitates manipulation of dataframes in Python
import os.path #helps return path information for files


#assign command line arguments; load input and output files
#assign the Metamonad database as input_db
input_db = sys.argv[1]
#input_db = "Metamonada_pred_OG_DB__HEAD.txt"

#assign the identifyer for the OG program to variable OG_program
OG_program = sys.argv[2]
#OG_program = "OrthoFinder_OG"
#identify the specific program whose OG data needs to be collected
#try:
if OG_program == "Br_Grouped_OGs":
	#if the OG program selected is the grouped Broccoli OGs,
	#save the contents of OG_program to variable og_id_col
	og_id_col = OG_program
elif OG_program == "Br_Single_OGs":
	#if the OG program selected is the non-duplicated Broccoli OGs,
	#save the contents of OG_program to variable og_id_col
	og_id_col = OG_program
elif OG_program == "ProteinOrtho_OG":
	#if the OG program selected is the grouped ProteinOrtho OGs,
	#save the contents of OG_program to variable og_id_col
	og_id_col = OG_program
elif OG_program == "OrthoFinder_OG":
	#if the OG program selected is the OrthoFinder OGs,
	#save the contents of OG_program to variable og_id_col
	print("this worked as intended")
	og_id_col = OG_program
elif OG_program == "SonicParanoid_OG":
	#if the OG program selected is the SonicParanoid OGs,
	#save the contents of OG_program to variable og_id_col
	og_id_col = OG_program
else:
	#if none of the above OG program options are selected,
	#print the following error message to the console
	print("You have entered an invalid orthologous clustering program selection. \n \
	   Please use one of the following: \n \
		   Br_Grouped_OGs OR Br_Single_OGs OR ProteinOrtho_OG OR OrthoFinder_OG OR SonicParanoid_OG")
	#and exit the program
	sys.exit(1)

#save the selection of OGs to filter for
input_OGs = sys.argv[3]
#input_OGs = "og_list_test.txt"
#input_OGs = "OG0000000"
#input_OGs = "OG0000000,OG0003024"

if os.path.isfile(input_OGs):
	#if the input selection of OGs is a file
	with open(input_OGs, 'r') as infile:
		#open the file for reading
		#and save the contents of the file (should be a column of OG IDs) to a list
		og_list = [line.rstrip('\n') for line in infile]
else:
	#if the input OG list is a string instead of a text file
	if OG_program == "Br_Grouped_OGs":
		#if the grouped Broccoli OGs option is given, 
		#save the OG IDs to a list based on semi-colon placement in the input string
		og_list = input_OGs.split(";")
		#then add spaces after comma values in the list
		#this is how to account for the duplicates in the list
		og_list = [br_list.replace(',', ', ') for br_list in og_list]
	else: 
		#for lliterally every single other option
		#save the OG IDs to a list based on comma placement in the input string
		og_list = input_OGs.split(",")

#assign output file name
if len(sys.argv) == 5:
	#if the user provides an extension name
	output_extension = sys.argv[4]
	#output_extension = "filt_OG0000000andOG0003024"
	#create output file name based on input file name and user-defined extension
	output_db = ".".join(input_db.split('.')[:-1]) + '__' + output_extension + '.txt'
else:
	#if the user does not provide an extension name
	#create output file name based on input file name
	output_db = ".".join(input_db.split('.')[:-1]) + '__' + OG_program + 'OG-selection.txt'


#Part 2: Create Pandas dataframe from input data

#read in the input OG database file, assigning the first row as a header row
ortho_df = pd.read_csv(input_db, sep = '\t', header=0, low_memory=False)
# sys:1: DtypeWarning: Columns (6,7,27,31) have mixed types.Specify dtype option on import or set low_memory=False.


#Part 3: Filter dataframe based on list of OG IDs & write out

#filter the dataframe
filt_og_df = ortho_df[ortho_df[og_id_col].isin(og_list)].copy()
#only search the values in the og_id_col for matches
#check to see whether the rows contain the values found in the og_list
#copy the rows that match these conditions to a new dataframe


#write out the filtered dataframe to a tab-separated text file
filt_og_df.to_csv(output_db, sep = '\t', index=False)
