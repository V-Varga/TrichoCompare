# -*- coding: utf-8 -*-
#!/bin/python
"""

Title: score_mitochondrialPathway.py
Date: 2022.03.26
Author: VirÃ¡g Varga

Description:
	This program scores the predictions generated for the protein queries present
		in the species database generated by prot_DB_plus_OGs.py (Metamonada_pred_OG_DB.txt)
		- or a filtered version of the same, with the same column structure - in order to
		guage the likelihood of a particular protein query belonging to the mitochondrial pathway,
		on the basis of prediction data generated by the MitoFates, TargetP, DeepLoc and
		YLoc programs.
		These scores are then used to generate a filtered version of the input dataframe.

List of functions:
	No functions are defined in this script.

List of standard and non-standard modules used:
	sys
	pandas
	numpy

Procedure:
	1. Loading required modules; defining inputs and outputs as command line
		arguments.
	2. Using Pandas to import the contents of the input database, and creating a
		new column in the dataframe for the results of the scoring.
	3. Scoring the predictions generated for each protein query sequence in the file,
		and adding the results to the dataframe.
	4. Filtering the dataframe based on the scores, and writing out results to two
		tab-separated text files: one containing all of the protein queries with their
		associated scores, and one containing only the contents of the filtered dataframe.

Known bugs and limitations:
	- There is no quality-checking integrated into the code.
	- This program requires the input of a flat database created by prot_DB_plus_OGs.py
		(named Metamonada_pred_OG_DB.txt in the original workflow), or a filtered verison
		of the same, with the same column structure maintained.
	- Only the input file name is user-defined; the naming of the output file is based on
		the input file name.
	- The score threshold should be a value between 0-4. The default value is 4
		(ie. good rating from all 4 prediction programs).

Version:
	This program is based on the score_OG_DB.py script, which was written to score the
		likelihood of a protein belonging to the secretory pathway during the 2021
		exploratory project, which was expanded into the Thesis work of which this
		program is a part.
	This script uses data from a greater number of programs as input, and scores the
		probability of a protein being targeted to the mitochondria. Both the script
		structure and scoring mechanism have been changed accordingly to reflect this.

Usage
	./score_mitochondrialPathway.py input_db [score_threshold]
	OR
	python score_mitochondrialPathway.py input_db [score_threshold]

This script was written for Python 3.8.12, in Spyder 5.1.5.

"""


#Part 1: Import necessary modules, assign command-line arguments

#import necessary modules
import sys #allows assignment of command line arguments
import pandas as pd #facilitates manipulation of dataframes in Python
import numpy as np #facilitates manipulation of arrays in Python


#determine threshold value for "good" score
if len(sys.argv) == 3:
	#see if the user has provided a score percent value
	#and if they have, save that value to variable score_threshold
	score_threshold = sys.argv[2]
else:
	#if a score threshold isn't provided,
	#use a score of 4 as the default
	score_threshold = 4


#assign command line arguments; load input and output files
input_db = sys.argv[1]
#input_db = "Metamonada_pred_OG_DB__HEAD.txt"
#output_db and filtered_db names are based on the input_db name
#output_db will contain a copy of the original database, plus scores
output_db = ".".join(input_db.split('.')[:-1]) + '__scoreMitochondria.txt'
#filtered_db will contain a filtered version of the scored database
filtered_db = ".".join(input_db.split('.')[:-1]) + '__scoreMitochondriaGood_' + str(score_threshold) + '.txt'


#Part 2: Create Pandas dataframe from input data

#read in the input OG database file, assigning the first row as a header row
ortho_df = pd.read_csv(input_db, sep = '\t', header=0, low_memory=False)
# sys:1: DtypeWarning: Columns (6,7,27,31) have mixed types.Specify dtype option on import or set low_memory=False.
#set the first column (containing the protein query ids) as an index
ortho_df.set_index('Query', inplace=True)

#add new column to the database, for the scoring
ortho_df['Mitochondria_Score'] = np.nan
#using 'NaN' here instead of 'None' because 'NaN' is numeric


#Part 3: Perform scoring of predictions for protein secretion

#now iterate through the ortho_df dataframe, and score each protein based on the DeepLoc & SignalP results
for index, row in ortho_df.iterrows():
	#iterate through the dataframe row by row
	score = 0
	#create a counter for the score
	#this will be rewritten to 0 with every iteration of the loop
	dl_pred = row['DeepL_Location']
	#save the DeepLoc prediction to variable dl_pred
	mf_pred = row['MitoF_Prediction']
	#save the MitoFates prediction to variable mf_pred
	tp_pred = row['TarP_Prediction']
	#save the TargetP prediction to variable tp_pred
	yl_pred = row['YLoc_Prediction']
	#save the YLoc prediction to variable yl_pre
	if dl_pred == 'Mitochondrion':
		#identify proteins DeepLoc predicts to be targeted to the mitochondria
		dl_prob = row['DeepL_Probability']
		#save the probability of the prediction to variable dl_prob
		dl_prob = pd.to_numeric(dl_prob)
		#ensure that the value is read as numeric
		if dl_prob >= 0.5:
			#if dl_prob is greater than or equal to 0.5 (>=0.5),
			#add 1 point to the score
			score += 1
		else:
			#if dl_prob is less than 0.5,
			#add 0.5 to the score
			score += 0.5
	if tp_pred == 'mTP':
		#identify proteins TargetP predicts to be targeted to the mitochondria
		tp_prob = row['TarP_Probability']
		#save the probability of targeting tp_prob
		tp_prob = pd.to_numeric(tp_prob)
		#ensure that the value is read as numeric
		if tp_prob >= 0.5:
			#if tp_prob is greater than or equal to 0.5 (>=0.5),
			#add 1 point to the score
			score += 1
		else:
			#if tp_cm_prob is less than 0.5,
			#add 0.5 to the score
			score += 0.5
	if mf_pred == 'Possessing mitochondrial presequence':
		#identify proteins MitoFates identifies as being targeted to the mitochondria
		mf_prob = row['MitoF_Probability_of_presequence']
		#save the probability of targeting to the mitochondria to variable mf_prob
		mf_prob = pd.to_numeric(mf_prob)
		#ensure that the value is read as numeric
		if mf_prob >= 0.5:
			#if mf_prob is greater than or equal to 0.5 (>=0.5),
			#add 1 point to the score
			score +=1
		else:
			#if mf_prob is less than 0.5,
			#add 0.5 to the score
			score += 0.5
	if yl_pred == 'mitochondrion':
		#identify proteins YLoc predicts to be targeted to the mitochondria
		yl_prob = row['YLoc_Probability']
		#save the probability of the prediction to variable yl_prob
		yl_prob = pd.to_numeric(yl_prob)
		#ensure that the value is read as numeric
		if yl_prob >= 0.5:
			#if yl_prob is greater than or equal to 0.5 (>=0.5),
			#add 1 point to the score
			score += 1
		else:
			#if yl_prob is less than 0.5,
			#add 0.5 to the score
			score += 0.5
	#fill in the calculated score for the protein in the appropriate location in the dataframe
	ortho_df.at[index, 'Mitochondria_Score'] = score


#Part 4: Filter the dataframe based on the scores, and write out results

#create new filtered datafarme based on the scores
filt_ortho_df = ortho_df[ortho_df['Mitochondria_Score'] >= float(score_threshold)]
#only scores >= the threshold score will be kept in this new dataframe


if filt_ortho_df.empty:
	#let the user know if no protein queries met the scoring threshold used
	print("No protein queries met the desired score threshold of " + str(score_threshold) + "!")
else:
	#if the dataframe exists
	#write the scored dataframe out to the assigned result file
	filt_ortho_df.to_csv(filtered_db, sep = '\t', index=True)
	#resulsts will be written out to a tab-separated text file

#next write out the scored dataframe to its assigned outfile
ortho_df.to_csv(output_db, sep = '\t', index=True)
#results will be written out to a tab-separated text file
